colnames(diamonds)
head(diamonds)
qplot(diamonds$carat, diamonds$price)
colnames(diamonds)
diamonds %>%
qplot(carat, price)
diamonds %>%
ggplot(carat, price)
diamonds %>%
ggplot("carat", "price")
diamonds %>%
qplot("carat", "price")
data <- diamonds
data <- diamonds
data %>%
qplot("carat", "price")
library(tidyverse)
head(diamonds)
qplot(diamonds$carat, diamonds$price)
qplot(diamonds$price)
qplot(data = diamonds, price)
qplot(data = diamonds, carat, price)
# Piping does not work for qplot, because the first argument of qplot is NOT data!! The first argument of qplot is "x". If you use ggplot, then you can pipe, but then it has different syntax and has aes.
qplot(data = diamonds,
x = carat,
y = price,
shape = clarity,
color = cut)
d <- ggplot(diamonds, aes(x=carat, y=price)) # first you set the aesthetic and dataset
d + geom_point() # then you add geoms
d + geom_point(aes(colour = carat)) # and you can keep doing this to add layers to the plot
d <- ggplot(diamonds, aes(x = carat, y = price)) # first you set the aesthetic and dataset
d + geom_point() # then you add geoms
d + geom_point(aes(colour = carat)) # and you can keep doing this to add layers to the plot
#qplot(data = diamonds,
#     x = carat,
#    y = price,
#   shape = clarity,
#  color = cut)
ggplot(data = diamonds
mapping = aes(x = carat, y = price)
#qplot(data = diamonds,
#     x = carat,
#    y = price,
#   shape = clarity,
#  color = cut)
ggplot(data = diamonds,
mapping = aes(x = carat, y = price)
)
#qplot(data = diamonds,
#     x = carat,
#    y = price,
#   shape = clarity,
#  color = cut)
ggplot(data = diamonds,
mapping = aes(x = "carat", y = "price")
)
#qplot(data = diamonds,
#     x = carat,
#    y = price,
#   shape = clarity,
#  color = cut)
ggplot(data = diamonds,
mapping = aes(x = carat, y = price)
)
#qplot(data = diamonds,
#     x = carat,
#    y = price,
#   shape = clarity,
#  color = cut)
ggplot(data = diamonds,
mapping = aes(x = carat, y = price)
+ geom_point()
)
d <- ggplot(diamonds, aes(x = carat, y = price)) # first you set the aesthetic and dataset
d + geom_point() # then you add geoms
# d + geom_point(aes(colour = carat)) # and you can keep doing this to add layers to the plot
#qplot(data = diamonds,
#     x = carat,
#    y = price,
#   shape = clarity,
#  color = cut)
d <- ggplot(diamonds, aes(x = carat, y = price))
d + geom_point()
# ggplot(data = diamonds,
#     mapping = aes(x = carat, y = price)
#    + geom_point()
)
#qplot(data = diamonds,
#     x = carat,
#    y = price,
#   shape = clarity,
#  color = cut)
ggplot(diamonds,
aes(x = carat, y = price,
shape = clarity,
color = cut)) +
geom_point()
# d + geom_point()
# ggplot(data = diamonds,
#     mapping = aes(x = carat, y = price)
#    + geom_point()
)
ggplot(diamonds,
aes(x = carat, y = price,
shape = clarity,
color = cut)) +
geom_point() +
facet_grid(clarity ~ cut)
ggplot(diamonds,
aes(x = carat, y = price,
color = cut)) +
geom_point() +
facet_grid(clarity ~ cut)
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(shape = ".") +
facet_grid(cut ~ clarity)
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(shape = ".") +
facet_grid(cut ~ clarity) +
geom_smooth()
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(shape = ".") +
facet_grid(cut ~ clarity) +
# geom_smooth()
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(shape = ".") +
facet_grid(cut ~ clarity) # +
# geom_smooth()
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(shape = ".") +
facet_grid(cut ~ clarity) +
geom_smooth()
ggplot(diamonds, aes(x=carat, y=price)) +
geom_histogram(binwidth = "5") +
facet_grid(cut ~ clarity)
ggplot(diamonds, aes(x=carat)) +
geom_histogram(binwidth = "5") +
facet_grid(cut ~ clarity)
ggplot(diamonds, aes(x=carat)) +
geom_histogram(binwidth = 5) +
facet_grid(cut ~ clarity)
ggplot(diamonds, aes(x=carat)) +
geom_histogram(binwidth = 5) +
facet_grid(cut ~ clarity) +
geom_density()
ggplot(diamonds, aes(x=carat)) +
geom_histogram(binwidth = 5) +
# facet_grid(cut ~ clarity) +
geom_density()
ggplot(diamonds, aes(x=carat)) +
geom_histogram(binwidth = 5) +
# facet_grid(cut ~ clarity) +
# geom_density()
ggplot(diamonds, aes(x=carat)) +
geom_histogram(binwidth = 5) # +
# facet_grid(cut ~ clarity) +
# geom_density()
ggplot(diamonds, aes(x=carat)) +
geom_histogram(binwidth = 5) +
facet_grid(cut ~ clarity) +
geom_density()
ggplot(diamonds, aes(x=carat)) +
geom_histogram(binwidth = 5) +
facet_grid(cut ~ clarity) +
geom_density()
ggplot(diamonds, aes(x=carat)) +
geom_histogram(binwidth = 5) +
facet_grid(cut ~ clarity) +
geom_density()
ggplot(diamonds, aes(x=carat, y=price)) +
geom_point(shape = ".") +
facet_grid(cut ~ clarity) +
geom_smooth()
library(tidyverse)
# two helper functions
sem <- function(x) {sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x)))}
ci95 <- function(x) {sem(x) * 1.96} # lazy normal approximation
d <- read_csv("data/Ontogeny_fairness_seven_societies_data.csv",
na = c("NA", ".")) # they use . to indicate NA
facVars <- c("eq.uneq", "value", "decision")
d[, facVars] <- lapply(d[, facVars], factor)
d$trial.number <- as.numeric(gsub(".(\\d+)", "\\1", d$trial))
facVars <- c("eq.uneq", "value", "decision")
d[, facVars] <- lapply(d[, facVars], factor)
d$trial.number <- as.numeric(gsub(".(\\d+)", "\\1", d$trial))
d$trial_type <- factor(d$eq.uneq,
levels = c("E","U"),
labels = c("Equal","Unequal"))
d$condition <- factor(d$condition,
levels = c("AI","DI"),
labels = c("Advantageous","Disadvantageous"))
library(tidyverse)
# two helper functions
sem <- function(x) {sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x)))}
ci95 <- function(x) {sem(x) * 1.96} # lazy normal approximation
d <- read_csv("data/Ontogeny_fairness_seven_societies_data.csv",
na = c("NA", ".")) # they use . to indicate NA
facVars <- c("eq.uneq", "value", "decision")
d[, facVars] <- lapply(d[, facVars], factor)
d$trial.number <- as.numeric(gsub(".(\\d+)", "\\1", d$trial))
d$trial_type <- factor(d$eq.uneq,
levels = c("E","U"),
labels = c("Equal","Unequal"))
d$condition <- factor(d$condition,
levels = c("AI","DI"),
labels = c("Advantageous","Disadvantageous"))
d$trial_type <- factor(d$eq.uneq,
levels = c("E","U"),
labels = c("Equal","Unequal"))
d$condition <- factor(d$condition,
levels = c("AI","DI"),
labels = c("Advantageous","Disadvantageous"))
colnames(d)
View(d)
colnames(d)
chart1 <- d %>%
group_by(country, actor.age.years) %>%
summarize()
chart1 <- d %>%
group_by(country, actor.age.years) %>%
summarize()
chart1 <- d %>%
group_by(country, actor.age.years) %>%
summarize(count())
chart1 <- d %>%
group_by(country, actor.age.years) %>%
summarize(l = length())
chart1 <- d %>%
group_by(country) %>%
summarize(number_n = n())
chart1 <- d %>%
group_by(country) %>%
summarize(number_n = mean())
colnames(d)
chart1 <- d %>%
group_by(country) %>%
summarize(count_n = count(decision))
chart1 <- d %>%
group_by(country) %>%
summarize(decision_n = count(decision))
chart1 <- d %>%
group_by(country) %>%
summarize(decision, Count = n ())
chart1 <- d %>%
group_by(country) %>%
summarize(decision, Count = n ())
chart1 <- d %>%
group_by(country) %>%
summarize(Count = n ())
chart1 <- d %>%
group_by(country) %>%
summarize(count = n ())
colnames(d)
library(tidyverse)
# two helper functions
sem <- function(x) {sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x)))}
ci95 <- function(x) {sem(x) * 1.96} # lazy normal approximation
d <- read_csv("data/Ontogeny_fairness_seven_societies_data.csv",
na = c("NA", ".")) # they use . to indicate NA
facVars <- c("eq.uneq", "value", "decision")
d[, facVars] <- lapply(d[, facVars], factor)
d$trial.number <- as.numeric(gsub(".(\\d+)", "\\1", d$trial))
d$trial_type <- factor(d$eq.uneq,
levels = c("E","U"),
labels = c("Equal","Unequal"))
d$condition <- factor(d$condition,
levels = c("AI","DI"),
labels = c("Advantageous","Disadvantageous"))
colnames(d)
chart1 <- d %>%
group_by(country) %>%
summarize(count = n ())
library(tidyverse)
# two helper functions
sem <- function(x) {sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x)))}
ci95 <- function(x) {sem(x) * 1.96} # lazy normal approximation
colnames(d)
chart1 <- d %>%
group_by(country) %>%
summarize(count = n ())
chart1 <- d %>%
group_by(country) %>%
summarize(count = n ())
d %>%
group_by(country) %>%
summarize(count = n ())
country
d %>%
group_by(country, decision) %>%
summarize(count = n ())
colnames(d)
d %>%
group_by(country, decision, eq.uneq) %>%
summarize(count = n ())
d %>%
group_by(country, eq.uneq, decision) %>%
summarize(count = n ())
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count")
colnames(d)
d %>%
group_by(country, eq.uneq, decision) %>%
summarize(count = n ())
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count")
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count")
?facet
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count")
facet_wrap(country)
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count")
facet_wrap(~country)
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count")
facet_wrap(~eq.uneq)
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count")
facet_wrap(country~eq.uneq)
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count") +
facet_wrap(country~eq.uneq)
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count") +
facet_wrap(~country)
colnames(d)
d <- d %>%
filter(eq.uneq != "NA" & decision != "NA")
colnames(d)
d <- d %>%
filter(eq.uneq != "NA" & decision != "NA")
d %>%
group_by(country, eq.uneq, decision) %>%
summarize(count = n ())
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count")
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count") +
facet_wrap(~country)
colnames(d)
colnames(d)
d <- d %>%
filter(eq.uneq != "NA" & decision != "NA")
d %>%
group_by(country, eq.uneq, decision) %>%
summarize(count = n ())
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count")
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count") +
facet_wrap(~country)
d <- d %>%
group_by(country) %>%
mutate()
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count") +
facet_wrap(~country)
?mutate
d <- d %>%
mutate(mean(decision == accept))
d <- d %>%
mutate(mean(decision == "accept"))
colnames(d)
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count") +
facet_wrap(~country)
d <- d %>%
mutate(percent_accept <- mean(decision == "accept"))
colnames(d)
d <- d %>%
mutate(mean(decision == "accept"))
colnames(d)
colnames(d)
d <- d %>%
mutate(foo = mean(decision == "accept"))
d <- d %>%
mutate(percentage_accept = mean(decision == "accept"))
colnames(d)
library(tidyverse)
# two helper functions
sem <- function(x) {sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x)))}
ci95 <- function(x) {sem(x) * 1.96} # lazy normal approximation
d <- read_csv("data/Ontogeny_fairness_seven_societies_data.csv",
na = c("NA", ".")) # they use . to indicate NA
facVars <- c("eq.uneq", "value", "decision")
d[, facVars] <- lapply(d[, facVars], factor)
d$trial.number <- as.numeric(gsub(".(\\d+)", "\\1", d$trial))
d$trial_type <- factor(d$eq.uneq,
levels = c("E","U"),
labels = c("Equal","Unequal"))
d$condition <- factor(d$condition,
levels = c("AI","DI"),
labels = c("Advantageous","Disadvantageous"))
d <- d %>%
filter(eq.uneq != "NA" & decision != "NA")
d %>%
group_by(country, eq.uneq, decision) %>%
summarize(count = n ())
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count")
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count") +
facet_wrap(~country)
d <- d %>%
mutate(percentage_accept = mean(decision == "accept"))
head(d)
head(d)
d <- d %>%
group_by(country) %>%
mutate(percentage_accept = mean(decision == "accept"))
head(d)
tail(d)
ggplot(d, aes(x = percentage_accept)) +
geom_histogram(stat = "count") +
facet_wrap(~country)
colnames(d)
ggplot(d, aes(x = country)) +
geom_histogram(stat = "count") +
facet_wrap(~percentage_accept)
ggplot(d, aes(x = country)) +
geom_histogram(stat = "count") +
facet_wrap(~actor.age.years)
ggplot(d, aes(x = actor.age.years)) +
geom_histogram(stat = "count") +
facet_wrap(~country)
ggplot(d, aes(x = actor.age.years)) +
geom_smooth +
facet_wrap(~country)
ggplot(d, aes(x = actor.age.years)) +
geom_smooth() +
facet_wrap(~country)
ggplot(d, aes(x = actor.age.years, y = percentage_accept)) +
geom_smooth() +
facet_wrap(~country)
d <- d %>%
group_by(country, actor.age.years) %>%
mutate(percentage_accept = mean(decision == "accept"))
ggplot(d, aes(x = actor.age.years, y = percentage_accept)) +
geom_smooth() +
facet_wrap(~country)
d <- d %>%
group_by(country, actor.age.years, eq.uneq) %>%
mutate(percentage_accept = mean(decision == "accept"))
ggplot(d, aes(x = actor.age.years, y = percentage_accept)) +
geom_smooth() +
facet_wrap(~country)
ggplot(d, aes(x = actor.age.years, y = percentage_accept)) +
geom_smooth() +
facet_wrap(eq.uneq ~country)
?geom_smooth
ggplot(d, aes(x = actor.age.years, y = country)) +
geom_line() +
facet_wrap(eq.uneq ~country)
ggplot(d, aes(x = actor.age.years)) +
geom_line() +
facet_wrap(eq.uneq ~country)
ggplot(d, aes(x = actor.age.years, y = percent_accept, color = country)) +
geom_smooth() +
facet_wrap(eq.uneq ~country)
library(tidyverse)
# two helper functions
sem <- function(x) {sd(x, na.rm = TRUE) / sqrt(sum(!is.na(x)))}
ci95 <- function(x) {sem(x) * 1.96} # lazy normal approximation
d <- read_csv("data/Ontogeny_fairness_seven_societies_data.csv",
na = c("NA", ".")) # they use . to indicate NA
facVars <- c("eq.uneq", "value", "decision")
d[, facVars] <- lapply(d[, facVars], factor)
d$trial.number <- as.numeric(gsub(".(\\d+)", "\\1", d$trial))
d$trial_type <- factor(d$eq.uneq,
levels = c("E","U"),
labels = c("Equal","Unequal"))
d$condition <- factor(d$condition,
levels = c("AI","DI"),
labels = c("Advantageous","Disadvantageous"))
d <- d %>%
filter(eq.uneq != "NA" & decision != "NA")
d %>%
group_by(country, eq.uneq, decision) %>%
summarize(count = n ())
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count")
ggplot(d, aes(x = decision)) +
geom_histogram(stat = "count") +
facet_wrap(~country)
d <- d %>%
group_by(country, actor.age.years, eq.uneq) %>%
mutate(percentage_accept = mean(decision == "accept"))
head(d)
tail(d)
ggplot(d, aes(x = country)) +
geom_histogram(stat = "count") +
facet_wrap(~actor.age.years)
colnames(d)
ggplot(d, aes(x = actor.age.years, y = percentage_accept)) +
geom_smooth() +
facet_wrap(eq.uneq ~country)
ggplot(d, aes(x = actor.age.years, y = percentage_accept, color = country)) +
geom_smooth() +
facet_wrap(eq.uneq ~country)
ggplot(d, aes(x = actor.age.years, y = percentage_accept, color = country)) +
geom_smooth() +
facet_wrap(~eq.uneq)
d <- d %>%
mutate(percentage_accept = mean(decision == "accept"))
ggplot(d, aes(x = actor.age.years, y = percentage_accept, color = country)) +
geom_smooth() +
facet_wrap(~eq.uneq)
ggplot(d, aes(x = actor.age.years, y = percentage_accept, color = country)) +
geom_smooth() +
facet_wrap(~eq.uneq)
